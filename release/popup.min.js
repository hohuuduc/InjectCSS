document.addEventListener("DOMContentLoaded",(()=>{const configurationsListDiv=document.getElementById("configurationsList");const showAddFormButton=document.getElementById("showAddFormButton");const configFormDiv=document.getElementById("configForm");const configIdInput=document.getElementById("configId");const hostnameInput=document.getElementById("hostname");const customCSSInput=document.getElementById("customCSS");const saveConfigButton=document.getElementById("saveConfigButton");const cancelButton=document.getElementById("cancelButton");const statusElement=document.getElementById("status");let configurations=[];function generateId(){return Date.now().toString(36)+Math.random().toString(36).substring(2)}function displayStatus(message,isError=false){statusElement.textContent=message;statusElement.style.color=isError?"red":"green";setTimeout((()=>{statusElement.textContent=""}),3e3)}function renderConfigurations(){configurationsListDiv.innerHTML="";if(configurations.length===0){configurationsListDiv.innerHTML='<p>No configurations yet. Click "Add New" to get started.</p>'}else{configurations.forEach((config=>{const itemDiv=document.createElement("div");itemDiv.classList.add("config-item");itemDiv.innerHTML=`\n          <div class="config-item-header">\n            <label class="switch enable-toggle" title="Enable/Disable this script">\n              <input type="checkbox" data-id="${config.id}" ${config.enabled!==false?"checked":""}>\n              <span class="slider"></span>\n            </label>\n            <h3>${config.hostname}</h3>\n            <div class="actions">\n              <button class="edit" data-id="${config.id}">Edit</button>\n              <button class="delete" data-id="${config.id}">Delete</button>\n            </div>\n          </div>\n          <p class="css-preview">CSS: ${config.css.substring(0,40)}${config.css.length>40?"...":""}</p>\n        `;configurationsListDiv.appendChild(itemDiv)}))}document.querySelectorAll(".edit").forEach((button=>{button.addEventListener("click",handleEdit)}));document.querySelectorAll(".delete").forEach((button=>{button.addEventListener("click",handleDelete)}));document.querySelectorAll('.enable-toggle input[type="checkbox"]').forEach((checkbox=>{checkbox.addEventListener("change",handleToggleEnable)}))}function loadConfigurations(){chrome.storage.local.get(["configurations"],(result=>{configurations=result.configurations||[];renderConfigurations()}))}function saveConfigurations(){chrome.storage.local.set({configurations:configurations},(()=>{displayStatus("All configurations saved!");loadConfigurations();applyToActiveTabIfMatched()}))}function showForm(isEdit=false,config=null){configFormDiv.style.display="block";showAddFormButton.style.display="none";const currentFormTitle=document.getElementById("formTitle")||{textContent:""};if(isEdit&&config){currentFormTitle.textContent="Edit Host Configuration";configIdInput.value=config.id||"";hostnameInput.value=config.hostname;customCSSInput.value=config.css;configFormDiv.dataset.editingOriginalId=config.id}else{currentFormTitle.textContent="Add New Host";configIdInput.value="";hostnameInput.value="";customCSSInput.value="";delete configFormDiv.dataset.editingOriginalId}}function hideForm(){configFormDiv.style.display="none";showAddFormButton.style.display="block";configIdInput.value="";hostnameInput.value="";customCSSInput.value="";delete configFormDiv.dataset.editingOriginalId}showAddFormButton.addEventListener("click",(()=>{showForm()}));cancelButton.addEventListener("click",(()=>{hideForm()}));saveConfigButton.addEventListener("click",(()=>{const hostname=hostnameInput.value.trim();const css=customCSSInput.value;const originalIdForEdit=configFormDiv.dataset.editingOriginalId;const isInEditContext=typeof originalIdForEdit!=="undefined";if(!hostname){displayStatus("Hostname cannot be empty.",true);return}if(isInEditContext){const index=configurations.findIndex((c=>c.id===originalIdForEdit));if(index!==-1){const currentItem=configurations[index];const newItemId=currentItem.id||generateId();if(!currentItem.id){displayStatus("Item updated and new ID created due to invalid old ID.",false)}configurations[index]={...currentItem,id:newItemId,hostname:hostname,css:css}}else{displayStatus("Error: Original item not found for editing. Added as a new item.",true);configurations.push({id:generateId(),hostname:hostname,css:css,enabled:true})}}else{configurations.push({id:generateId(),hostname:hostname,css:css,enabled:true})}saveConfigurations();hideForm()}));function handleEdit(event){const id=event.target.dataset.id;const configToEdit=configurations.find((c=>c.id===id));if(configToEdit){showForm(true,configToEdit)}}function handleDelete(event){const id=event.target.dataset.id;if(confirm("Are you sure you want to delete this configuration?")){configurations=configurations.filter((c=>c.id!==id));saveConfigurations()}}function handleToggleEnable(event){const id=event.target.dataset.id;const isEnabled=event.target.checked;const configIndex=configurations.findIndex((c=>c.id===id));if(configIndex!==-1){configurations[configIndex].enabled=isEnabled;saveConfigurations()}}function applyToActiveTabIfMatched(){chrome.tabs.query({active:true,currentWindow:true},(async tabs=>{if(tabs[0]&&tabs[0].url&&tabs[0].id){const activeTabId=tabs[0].id;try{const currentTabUrl=new URL(tabs[0].url);for(const config of configurations){if(currentTabUrl.hostname.includes(config.hostname)&&config.css){if(config.enabled!==false){await chrome.scripting.insertCSS({target:{tabId:activeTabId},css:config.css})}else{await chrome.scripting.removeCSS({target:{tabId:activeTabId},css:config.css}).catch((e=>console.warn("Error removing old CSS:",e)))}}}}catch(e){console.error("Error processing current tab URL:",e)}}}))}loadConfigurations()}));