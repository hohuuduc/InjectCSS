async function applyCSSForTab(tabId,tabUrl){if(!tabUrl)return;const result=await new Promise((resolve=>chrome.storage.local.get(["configurations"],resolve)));try{const configurations=result.configurations||[];if(configurations.length>0){const url=new URL(tabUrl);await chrome.scripting.removeCSS({target:{tabId:tabId},css:"*"}).catch((e=>console.warn(`Lỗi khi xóa CSS cũ trong background cho tab ${tabId}:`,e)));for(const config of configurations){if(config.enabled!==false&&config.hostname&&config.css&&url.hostname.includes(config.hostname)){try{await chrome.scripting.insertCSS({target:{tabId:tabId},css:config.css})}catch(err){}}}}}catch(e){}}chrome.tabs.onUpdated.addListener(((tabId,changeInfo,tab)=>{if(changeInfo.status==="complete"&&tab.url){applyCSSForTab(tabId,tab.url)}}));function injectOnExistingTabs(){chrome.storage.local.get(["configurations"],(result=>{const configurations=result.configurations||[];if(configurations.length>0){chrome.tabs.query({},(tabs=>{for(let tab of tabs){if(tab.url&&tab.id){applyCSSForTab(tab.id,tab.url)}}}))}}))}chrome.runtime.onStartup.addListener(injectOnExistingTabs);chrome.runtime.onInstalled.addListener(injectOnExistingTabs);